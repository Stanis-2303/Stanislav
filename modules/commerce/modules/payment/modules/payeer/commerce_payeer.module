<?php

function commerce_payeer_settings_form($settings = NULL)
{
	$form = array();

	$settings = (array) $settings + array(
		'merchant_url' => '',
		'merchant_id' => '',
		'secret_key' => '',
		'currency' => '',
		'ip_filter' => '',
		'email_error' => '',
		'payeer_log' => array('1'),
		'success_message' => '',
		'fail_message' => '',
	);

	$form['merchant_url'] = array(
		'#type' => 'textfield',
		'#title' => t('URL мерчанта'),
		'#description' => t('ссылка для оплаты в системе Payeer'),
		'#default_value' => 'https://payeer.com/merchant/',
	);

	$form['merchant_id'] = array(
		'#type' => 'textfield',
		'#title' => t('Идентификатор магазина'),
		'#description' => t('Идентификатор магазина, зарегистрированного в системе "PAYEER".'),
		'#default_value' => $settings['merchant_id'],
	);

	$form['secret_key'] = array(
		'#type' => 'textfield',
		'#title' => t('Секретный ключ'),
		'#description' => t('Секретный ключ магазина'),
		'#default_value' => $settings['secret_key'],
	);

	$form['ip_filter'] = array(
		'#type' => 'textfield',
		'#title' => t('IP - фильтр'),
		'#description' => t('Список доверенных ip адресов, можно указать маску'),
		'#default_value' => $settings['ip_filter'],
	);

	$form['email_error'] = array(
		'#type' => 'textfield',
		'#title' => t('Email'),
		'#description' => t('Email для отправки ошибок оплаты'),
		'#default_value' => $settings['email_error'],
	);
	
	$form['payeer_log'] = array(
		'#type' => 'textfield',
		'#title' => t('Путь до журнала платежных операций (например, /payeer_orders.log)'),
		'#description' => t('Если путь не указан, то журнал не записывается'),
		'#default_value' => $settings['payeer_log'],
	);

	$form['success_message'] = array(
		'#type' => 'textarea',
		'#rows' => 3,
		'#title' => t('Удачный платеж'),
		'#description' => t('Сообщение об удачной оплате'),
		'#default_value' => $settings['success_message'],
	);

	$form['fail_message'] = array(
		'#type' => 'textarea',
		'#rows' => 3,
		'#title' => t('Неудачный платеж'),
		'#description' => t('Сообщение о неудачной оплате'),
		'#default_value' => $settings['fail_message'],
	);

	$form['url'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#title' => t('URL (success, fail, status) для магазина Payeer')
	);

	$form['url']['success'] = array(
		'#type' => 'textfield',
		'#title' => t('URL успешной оплаты'),
		'#value' => url('payeer/success', array('absolute' => TRUE)),
		'#description' => t("укажите этот url в аккаунте Payeer")
	);

	$form['url']['fail'] = array(
		'#type' => 'textfield',
		'#title' => t('URL неуспешной оплаты'),
		'#value' => url('payeer/fail', array('absolute' => TRUE)),
		'#description' => t("укажите этот url в аккаунте Payeer")
	);
	
	$form['url']['status'] = array(
		'#type' => 'textfield',
		'#title' => t('URL обработчика'),
		'#value' => url('payeer/status', array('absolute' => TRUE)),
		'#description' => t("укажите этот url в аккаунте Payeer")
	);

	$form['#submit'][] = variable_set('commerce_payeer_settings', $form);

	return $form;
}

function commerce_payeer_commerce_payment_method_info() 
{
	$payment_methods = array();
	
	$payment_methods['commerce_payeer'] = array(
		'base' => 'commerce_payeer',
		'title' => t('Payeer'),
		'short_title' => t('Payeer'),
		'display_title' => t('Payeer'),
		'description' => t('Integrates Payeer Merchant'),
		'terminal' => FALSE,
		'offsite' => TRUE,
		'active' => TRUE,
	);

	return $payment_methods;
}

function commerce_payeer_submit_form($payment_method, $pane_values, $checkout_pane, $order) 
{
	$build = array();
	$text = theme('image', array(
		'path' => 'http://payeer.com/bitrix/templates/difiz/images/logo.png',
		'alt' => t('Payeer'),
		'title' => t('Payeer'),
		'attributes' => array('class' => 'logo-payeer'),
	));
	$text .= '<div class="desc">' . t('Payeer - Используйте множество платежных систем и банков в одном кошельке!') . '</div>';
	$build['print_receipt'] = array('#markup' => $text);
	return $build;
}

function commerce_payeer_menu() 
{
	$items['payeer/status'] = array(
		'title' => 'Cтатус оплаты заказа',
		'page callback' => 'commerce_payeer_status',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	
	$items['payeer/success'] = array(
		'title' => 'Успешный платеж',
		'page callback' => 'commerce_payeer_success',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	$items['payeer/fail'] = array(
		'title' => 'Неудачный платеж',
		'page callback' => 'commerce_payeer_fail',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	return $items;
}

function commerce_payeer_redirect_form($form, &$form_state, $order, $payment_method)
{
	return commerce_payeer_build_redirect_form($form, $form_state, $order, $payment_method['settings']);
}

function commerce_payeer_build_redirect_form($form, &$form_state, $order, $settings) 
{
	$wrapper = entity_metadata_wrapper('commerce_order', $order);
	$m_url = commerce_payeer_get_settings('merchant_url');
	$m_shop = commerce_payeer_get_settings('merchant_id');
	$m_orderid = $order->order_id;
	$m_curr = $wrapper->commerce_order_total->currency_code->value();
	$m_curr = $m_curr == 'RUR' ? 'RUB' : $m_curr;
	$amount = $wrapper->commerce_order_total->amount->value();
	$m_amount = commerce_currency_amount_to_decimal($amount, $m_curr);
	$m_amount = number_format($m_amount, 2, '.', '');
	$m_desc = base64_encode('Оплата заказа №' . $m_orderid);
	$m_key = commerce_payeer_get_settings('secret_key');

	$arHash = array(
		$m_shop,
		$m_orderid,
		$m_amount,
		$m_curr,
		$m_desc,
		$m_key
	);
	
	$sign = strtoupper(hash('sha256', implode(':', $arHash)));

	$form['#action'] = $m_url;
	
	$form['m_shop'] = array(
		'#type' => 'hidden',
		'#value' => $m_shop,
	);
	$form['m_orderid'] = array(
		'#type' => 'hidden',
		'#value' => $m_orderid,
	);
	$form['m_amount'] = array(
		'#type' => 'hidden',
		'#value' => $m_amount,
	);
	
	$form['m_curr'] = array(
		'#type' => 'hidden',
		'#value' => $m_curr,
	);
	
	$form['m_desc'] = array(
		'#type' => 'hidden',
		'#value' => $m_desc,
	);
	
	$form['m_sign'] = array(
		'#type' => 'hidden',
		'#value' => $sign,
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Оплатить'),
	);
	
	return $form;
}

function commerce_payeer_form_commerce_checkout_form_payment_alter(&$form, &$form_state, $form_id)
{
	unset($form["#form_id"]);
	unset($form["form_id"]);
	unset($form["form_token"]);
	unset($form["form_build_id"]);
}

function commerce_payeer_get_settings($settings) 
{
	$output = '';
	$vars = variable_get('commerce_payeer_settings', '');
	
	if (!empty($vars)) 
	{
		foreach ($vars as $key=>$var) 
		{
			if ($key == $settings) 
			{
				$output = $vars[$key]['#default_value'];
				break;
			}
		}
	}
	
	return $output;
}

function commerce_payeer_success() 
{
	$build = array();
	$order_id = preg_replace('/[^a-zA-Z0-9_-]/', '', substr($_GET['m_orderid'], 0, 32));
	
	if (isset($order_id) && isset($_GET['m_status'])) 
	{
		$message = t('Спасибо, ваш заказ оплачен! Ордер #@shop_order,<br />', array('@shop_order' => $order_id));
		
		drupal_set_message($message, 'status');
		
		if ($message = commerce_payeer_get_settings('success_message')) 
		{
			$build['message_success']['#markup'] = $message;
		}
	}
	else
	{
		$build = MENU_ACCESS_DENIED;
	}
	
	return $build;
}

function commerce_payeer_fail() 
{
	drupal_set_message(t('Payment unsuccessful!'), 'error');
	
	$build = array();
	
	if ($message = commerce_payeer_get_settings('fail_message')) 
	{
		$build['message_fail']['#markup'] = $message;
	}
	
	return $build;
}

function commerce_payeer_status() 
{
	if (!empty($_POST))
	{
		if (isset($_POST['m_operation_id']) && isset($_POST['m_sign']))
		{
			$err = false;
			$message = '';
			
			// запись логов
			
			$log_text = 
			"--------------------------------------------------------\n" .
			"operation id		" . $_POST['m_operation_id'] . "\n" .
			"operation ps		" . $_POST['m_operation_ps'] . "\n" .
			"operation date		" . $_POST['m_operation_date'] . "\n" .
			"operation pay date	" . $_POST['m_operation_pay_date'] . "\n" .
			"shop				" . $_POST['m_shop'] . "\n" .
			"order id			" . $_POST['m_orderid'] . "\n" .
			"amount				" . $_POST['m_amount'] . "\n" .
			"currency			" . $_POST['m_curr'] . "\n" .
			"description		" . base64_decode($_POST['m_desc']) . "\n" .
			"status				" . $_POST['m_status'] . "\n" .
			"sign				" . $_POST['m_sign'] . "\n\n";
			
			$log_file = commerce_payeer_get_settings('payeer_log');
			
			if (!empty($log_file))
			{
				file_put_contents($_SERVER['DOCUMENT_ROOT'] . $log_file, $log_text, FILE_APPEND);
			}
			
			// проверка цифровой подписи и ip

			$sign_hash = strtoupper(hash('sha256', implode(":", array(
				$_POST['m_operation_id'],
				$_POST['m_operation_ps'],
				$_POST['m_operation_date'],
				$_POST['m_operation_pay_date'],
				$_POST['m_shop'],
				$_POST['m_orderid'],
				$_POST['m_amount'],
				$_POST['m_curr'],
				$_POST['m_desc'],
				$_POST['m_status'],
				commerce_payeer_get_settings('secret_key')
			))));
			
			$valid_ip = true;
			$sIP = str_replace(' ', '', commerce_payeer_get_settings('ip_filter'));
			
			if (!empty($sIP))
			{
				$arrIP = explode('.', $_SERVER['REMOTE_ADDR']);
				if (!preg_match('/(^|,)(' . $arrIP[0] . '|\*{1})(\.)' .
				'(' . $arrIP[1] . '|\*{1})(\.)' .
				'(' . $arrIP[2] . '|\*{1})(\.)' .
				'(' . $arrIP[3] . '|\*{1})($|,)/', $sIP))
				{
					$valid_ip = false;
				}
			}
			
			if (!$valid_ip)
			{
				$message .= " - ip-адрес сервера не является доверенным\n" .
				"   доверенные ip: " . $sIP . "\n" .
				"   ip текущего сервера: " . $_SERVER['REMOTE_ADDR'] . "\n";
				$err = true;
			}

			if ($_POST['m_sign'] != $sign_hash)
			{
				$message .= " - не совпадают цифровые подписи\n";
				$err = true;
			}
			
			if (!$err)
			{
				// загрузка заказа
				
				$order = commerce_order_load($_POST['m_orderid']);

				if (!$order)
				{
					$message .= " - несуществующий ордер\n";
					$err = true;
				}
				else
				{
					$wrapper = entity_metadata_wrapper('commerce_order', $order);
					$order_curr = $wrapper->commerce_order_total->currency_code->value();
					$order_curr = $order_curr == 'RUR' ? 'RUB' : $order_curr;
					$order_amount = $wrapper->commerce_order_total->amount->value();
					$order_amount = commerce_currency_amount_to_decimal($order_amount, $order_curr);
					$order_amount = number_format($order_amount, 2, '.', '');
					
					// проверка суммы и валюты
				
					if ($_POST['m_amount'] != $order_amount)
					{
						$message .= " - неправильная сумма\n";
						$err = true;
					}

					if ($_POST['m_curr'] != $order_curr)
					{
						$message .= " - неправильная валюта\n";
						$err = true;
					}
					
					// проверка статуса
					
					if (!$err)
					{
						switch ($_POST['m_status'])
						{
							case 'success':
								commerce_payeer_create_transaction($_POST['m_orderid'], abs($_POST['m_amount']), $_POST['m_operation_id']);
								break;
								
							default:
								$message .= " - статус платежа не является success\n";
								$err = true;
								break;
						}
					}
				}
			}
			
			if ($err)
			{
				$to = commerce_payeer_get_settings('email_error');

				if (!empty($to))
				{
					$message = "Не удалось провести платёж через систему Payeer по следующим причинам:\n\n" . $message . "\n" . $log_text;
					$headers = "From: no-reply@" . $_SERVER['HTTP_HOST'] . "\r\n" . 
					"Content-type: text/plain; charset=utf-8 \r\n";
					mail($to, 'Ошибка оплаты', $message, $headers);
				}
				
				exit($_POST['m_orderid'] . '|error');
			}
			else
			{
				exit($_POST['m_orderid'] . '|success');
			}
		}
	}
}

function commerce_payeer_create_transaction($order_id, $amount, $trans_id) 
{
	$order = commerce_order_load($order_id);
	$payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
	$wrapper = entity_metadata_wrapper('commerce_order', $order);
	$currency_code = $wrapper->commerce_order_total->currency_code->value();
	
	$transaction = commerce_payment_transaction_new('commerce_payeer', $order->order_id);
	$transaction->instance_id = $payment_method['instance_id'];
	$transaction->amount = $amount * 100;
	$transaction->currency_code = $currency_code;
	$transaction->remote_id = $trans_id;
	$transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
	$transaction->message = '';
	$transaction->message_variables = array();

	commerce_payment_transaction_save($transaction);
	rules_invoke_all('commerce_checkout_complete', $order);
}

function commerce_payeer_server_fail_url()
{
	return url('payeer/fail', array('absolute' => TRUE));
}

function this_server_url()
{
	return url('/', array('absolute' => TRUE));
}
?>